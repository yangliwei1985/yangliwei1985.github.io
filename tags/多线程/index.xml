<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>多线程 on ylw&#39;s blog</title>
    <link>https://iblog.zone/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 多线程 on ylw&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 15 Mar 2022 17:30:37 +0000</lastBuildDate><atom:link href="https://iblog.zone/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java多线程02</title>
      <link>https://iblog.zone/archives/java%E5%A4%9A%E7%BA%BF%E7%A8%8B02/</link>
      <pubDate>Tue, 15 Mar 2022 17:30:37 +0000</pubDate>
      
      <guid>https://iblog.zone/archives/java%E5%A4%9A%E7%BA%BF%E7%A8%8B02/</guid>
      <description>1.线程池 1.1 线程状态介绍 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程
状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：
public class Thread {   public enum State {   /* 新建 */  NEW ,   /* 可运行状态 */  RUNNABLE ,   /* 阻塞状态 */  BLOCKED ,   /* 无限等待状态 */  WAITING ,   /* 计时等待 */  TIMED_WAITING ,   /* 终止 */  TERMINATED;  	}   // 获取当前线程的状态  public State getState() {  return jdk.</description>
    </item>
    
    <item>
      <title>Java多线程01</title>
      <link>https://iblog.zone/archives/java%E5%A4%9A%E7%BA%BF%E7%A8%8B01/</link>
      <pubDate>Tue, 15 Mar 2022 15:02:24 +0000</pubDate>
      
      <guid>https://iblog.zone/archives/java%E5%A4%9A%E7%BA%BF%E7%A8%8B01/</guid>
      <description>1.实现多线程 1.1简单了解多线程【理解】 是指从软件或者硬件上实现多个线程并发执行的技术。 具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。
1.2并发和并行【理解】   并行：在同一时刻，有多个指令在多个CPU上同时执行。
  并发：在同一时刻，有多个指令在单个CPU上交替执行。
  1.3进程和线程【理解】   进程：是正在运行的程序
独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位 动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的 并发性：任何进程都可以同其他进程一起并发执行
  线程：是进程中的单个顺序控制流，是一条执行路径
​	单线程：一个进程如果只有一条执行路径，则称为单线程程序
​	多线程：一个进程如果有多条执行路径，则称为多线程程序
  1.4实现多线程方式一：继承Thread类【应用】   方法介绍
   方法名 说明     void run() 在线程开启后，此方法将被调用执行   void start() 使此线程开始执行，Java虚拟机会调用run方法()      实现步骤
 定义一个类MyThread继承Thread类 在MyThread类中重写run()方法 创建MyThread类的对象 启动线程    代码演示
public class MyThread extends Thread {  @Override  public void run() {  for(int i=0; i&amp;lt;100; i++) {  System.</description>
    </item>
    
  </channel>
</rss>
